    * Teach send_control() to pay attention to LS_request_limit.
    * Move send_control() processing to a private thread queue, add an event to
      indicate request success/failure. Use the same queue for event delivery,
      kill ThreadedDispatcher.
    * Rename LsClient -> LsSession, create new class to handle IO.
    * Move create_session() and connection reestablishment to the thread queue,
      make do with Python's crappy httplib and use a select loop in a ingle
      thread to detect data on any session (maximum of 2 threads per app now).
    * Investigate the smallest async IO solution, if any. Consider padding out
      select loop just enough to handle write too, write a minimal asyncronous
      HTTP client.
    * Consider adding a little more rich BusinessObjects, e.g. Table object,
      although it's probably desirable to avoid this.
    * HTTP timeouts.
    * Permanent fix for the nasty mess changing global socket._fileobject
      state. Not a matter of if but when it will break.
    * Add locking to various places, e.g. LsClient._state.
    * Add bytes/events stats.
    * Stop using httplib entirely, it's an unreliable mess with semantics
      broken across Python versions.
    * Pay attention to server-advertised hostname in the session response,
      otherwise load balancers are likely to kick us due to inactivity.
      IMPORTANT.
    * Detect network breakage more speedily: set a low LS_keepalive_millis (say
      1000), then a socket timeout of about 3x that. The goal being steady flow
      of messages, and avoiding the cost of long time to detect failure and
      resulting session expiry/reestablishment.
